"""add more order types

Revision ID: 6cc41a6505a6
Revises: 4af9d12196f5
Create Date: 2024-01-24 16:18:47.589390

"""
import uuid

import sqlalchemy as sa
from alembic import op

from app.schemas.order_type import OrderDepType, OrderTypeName
from app.schemas.order_type_param import OrderParamValueType

# revision identifiers, used by Alembic.
revision = '6cc41a6505a6'
down_revision = '4af9d12196f5'
branch_labels = None
depends_on = None


def gen_id() -> str:
    return str(uuid.uuid4())

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    order_type_delivery = {"id": gen_id(), "name": OrderTypeName.DELIVERY_ORDER, "dep_type": OrderDepType.DELIVERY}
    order_type_params_delivery = [
        {
            "id": gen_id(),
            "name": "Дата доставки",
            "required": False,
            "order_type_id": order_type_delivery["id"],
            "value_type": OrderParamValueType.DATE,
        },
        {
            "id": gen_id(),
            "name": "Адрес",
            "required": False,
            "order_type_id": order_type_delivery["id"],
            "value_type": OrderParamValueType.TEXT,
        },
    ]

    order_type_magic = {"id": gen_id(), "name": OrderTypeName.MAGIC_ORDER, "dep_type": OrderDepType.DEPEND}
    order_type_params_magic = [
        {
            "id": gen_id(),
            "name": "Наименование зачарования",
            "required": True,
            "order_type_id": order_type_magic["id"],
            "value_type": OrderParamValueType.STR,
        },
        {
            "id": gen_id(),
            "name": "Описание",
            "required": True,
            "order_type_id": order_type_magic["id"],
            "value_type": OrderParamValueType.TEXT,
        },
        {
            "id": gen_id(),
            "name": "Срок исполнения",
            "required": True,
            "order_type_id": order_type_magic["id"],
            "value_type": OrderParamValueType.DATE,
        },
    ]

    order_type_craft = {"id": gen_id(), "name": OrderTypeName.CRAFT_PRODUCT_ORDER, "dep_type": OrderDepType.DEPEND}
    order_type_params_craft = [
        {
            "id": gen_id(),
            "name": "Наименование изделия",
            "required": True,
            "order_type_id": order_type_craft["id"],
            "value_type": OrderParamValueType.STR,
        },
        {
            "id": gen_id(),
            "name": "Требования к изделию",
            "required": True,
            "order_type_id": order_type_craft["id"],
            "value_type": OrderParamValueType.TEXT,
        },
        {
            "id": gen_id(),
            "name": "Срок исполнения",
            "required": True,
            "order_type_id": order_type_craft["id"],
            "value_type": OrderParamValueType.DATE,
        },
    ]

    meta = sa.MetaData()

    # pass in tuple with tables we want to reflect, otherwise whole database will get reflected
    meta.reflect(bind=op.get_bind(), only=('order_type','order_type_param'))

    order_types = [order_type_delivery, order_type_magic, order_type_craft]
    order_type_params = [
        *order_type_params_delivery,
        *order_type_params_magic,
        *order_type_params_craft,
    ]
    op.bulk_insert(sa.Table('order_type', meta), order_types)
    op.bulk_insert(sa.Table('order_type_param', meta), order_type_params)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
